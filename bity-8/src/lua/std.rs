extern crate hlua;
extern crate bresenham;

use self::bresenham::Bresenham;
use memory as mem;
use std::cmp;
use display;

pub fn load_std(lua: &mut hlua::Lua) {
    lua.openlibs(); // this is for testing, delete when not needed.
    lua.set("_peek", hlua::function1(|pos: i32|                     mem::peek(  pos as usize)));
    lua.set("_poke", hlua::function2(|pos: i32, val|                mem::poke_w(pos as usize, val)));
    lua.set("_mset", hlua::function3(|pos: i32, len: i32, val|      mem::mset_w(pos as usize, len as usize, val)));
    lua.set("_mcpy", hlua::function3(|des: i32, pos: i32, len: i32| mem::mcpy_w(des as usize, pos as usize, len as usize)));
    // PICO-8 Math library: max, min, mid, floor, ceiling, cos, sin, atan2, sqrt, abs, rnd, srand
    lua.set("max" , hlua::function2(|val: f32, other: f32| -> f32  {f32::max(val, other)}));
    lua.set("min" , hlua::function2(|val: f32, other: f32| -> f32  {f32::min(val, other)}));
    lua.set("floor" , hlua::function1(|val: f32| -> f32            {f32::floor(val)}));
    lua.set("ceil" , hlua::function1(|val: f32| -> f32             {f32::ceil(val)}));
    lua.set("sin" , hlua::function1(|val: f32| -> f32              {f32::sin(val)}));
    lua.set("cos" , hlua::function1(|val: f32| -> f32              {f32::cos(val)}));
    lua.set("atan2", hlua::function2(|val1: f32, val2: f32| -> f32 {f32::atan2(val1, val2)}));
    lua.set("sqrt" , hlua::function1(|val: f32| -> f32             {f32::sqrt(val)}));
    lua.set("abs" , hlua::function1(|val: f32| -> f32              {f32::abs(val)}));
    lua.set("rand", hlua::function1(|upper: f32| -> f32            {4f32}));
    
    // PICO-8 Math bitwise: and, or, xor, not, rotl, rotr, left shift, right shift (arithmetic and logical)
    lua.set("band", hlua::function2(|val1: i32, val2: i32| -> i32   {val1 & val2}));
    lua.set("bor",  hlua::function2(|val1: i32, val2: i32| -> i32   {val1 & val2}));
    lua.set("bxor", hlua::function2(|val1: i32, val2: i32| -> i32   {val1 & val2}));
    lua.set("bnot", hlua::function1(|val1: i32| -> i32              {!val1}));
    //lua.set("_rotl", hlua::function2(|val: i32, amt: i32|))

    // Drawing
    lua.set("draw_rect", hlua::function5(|x: i32, y: i32, width: i32, height: i32, color: u8| {
        for i in y..(y+height) {
            draw_horiz_line(x, x + width, i, color);
        }
    }));

    lua.set("draw_line", hlua::function5(|x1: i32, y1: i32, x2: i32, y2: i32, color: u8| {
      if y1 == y2 {
        draw_horiz_line(x1, x2, y1, color);
      } else {
        draw_line(x1,y1,x2,y2,color);
      }
    }));

    lua.set("draw_dot", hlua::function3(|x:i32,y:i32,color:u8| {
      set_point(x,y,color);
    }));

    lua.set("draw_circle", hlua::function4(|x: i32, y: i32, radius: i32, color: u8| {
      // http://nand2tetris-questions-and-answers-forum.32033.n3.nabble.com/Fast-circle-algorithm-td4030808.html

      let mut i = 0;
      let mut j = radius;
      let mut counter = 3 - (radius + radius);

      draw_horiz_line(x - radius, x + radius, y, color);

      while j > i {
        if counter < 0 {
          counter = counter + 6 + i + i + i + i;
          i = i + 1;
        } else {
          if counter > 0 && j > i {
            j = j - 1;
            counter = (counter + 4) - (j + j + j + j);
          }
        }

        draw_horiz_line(x - i, x + i, y + j, color);
        draw_horiz_line(x - i, x + i, y - j, color);
        draw_horiz_line(x - j, x + j, y + i, color);
        draw_horiz_line(x - j, x + j, y - i, color);
        
      }
    }));
    lua.set("sprite", hlua::function5(|src_sheet:u32, src_x: u32, src_y: u32, x: i32, y: i32| {
      draw_sprite(src_sheet, src_x, src_y, x, y, 1);
    }));
    lua.set("sprite_t", hlua::function6(|src_sheet:u32, src_x: u32, src_y: u32, x: i32, y: i32, alpha: u8| {
      draw_sprite_transparent(src_sheet, src_x, src_y, x, y, 1, alpha);
    }));
    lua.set("spritesheet", hlua::function0(|| {
      draw_sprite(0,6,0,0,0,1);
      draw_sprite(0,6,0,8,0,1);
      draw_sprite(0,6,0,16,0,1);
      draw_sprite(0,6,0,24,0,1);
      draw_sprite(0,6,0,32,0,1);
      draw_sprite(0,6,0,40,0,1);
      draw_sprite(0,6,0,48,0,1);
      draw_sprite(0,6,0,56,0,1);
      draw_sprite(0,6,0,64,0,1);
      draw_sprite(0,6,0,72,0,1);
      draw_sprite(0,6,0,80,0,1);
      draw_sprite(0,6,0,88,0,1);
      draw_sprite(0,6,0,96,0,1);
      draw_sprite(0,6,0,104,0,1);
      draw_sprite(0,6,0,112,0,1);
      draw_sprite(0,6,0,120,0,1);
      draw_sprite(0,6,0,128,0,1);
      draw_sprite(0,6,0,136,0,1);
      draw_sprite(0,6,0,144,0,1);
      draw_sprite(0,6,0,152,0,1);
      draw_sprite(0,6,0,160,0,1);
      draw_sprite(0,6,0,168,0,1);
      draw_sprite(0,6,0,176,0,1);
      draw_sprite(0,6,0,184,0,1);
      draw_sprite(0,6,1,0,  8,1);
      draw_sprite(0,6,1,8,  8,1);
      draw_sprite(0,6,1,16, 8,1);
      draw_sprite(0,6,1,24, 8,1);
      draw_sprite(0,6,1,32, 8,1);
      draw_sprite(0,6,1,40, 8,1);
      draw_sprite(0,6,1,48, 8,1);
      draw_sprite(0,6,1,56, 8,1);
      draw_sprite(0,6,1,64, 8,1);
      draw_sprite(0,6,1,72, 8,1);
      draw_sprite(0,6,1,80, 8,1);
      draw_sprite(0,6,1,88, 8,1);
      draw_sprite(0,6,1,96, 8,1);
      draw_sprite(0,6,1,104,8,1);
      draw_sprite(0,6,1,112,8,1);
      draw_sprite(0,6,1,120,8,1);
      draw_sprite(0,6,1,128,8,1);
      draw_sprite(0,6,1,136,8,1);
      draw_sprite(0,6,1,144,8,1);
      draw_sprite(0,6,1,152,8,1);
      draw_sprite(0,6,1,160,8,1);
      draw_sprite(0,6,1,168,8,1);
      draw_sprite(0,6,1,176,8,1);
      draw_sprite(0,6,1,184,8,1);
      draw_sprite(0,6,0,0,  16,1);
      draw_sprite(0,5,0,8,  16,1);
      draw_sprite(0,5,0,16, 16,1);
      draw_sprite(0,5,0,24, 16,1);
      draw_sprite(0,5,0,32, 16,1);
      draw_sprite(0,5,0,40, 16,1);
      draw_sprite(0,5,0,48, 16,1);
      draw_sprite(0,5,0,56, 16,1);
      draw_sprite(0,5,0,64, 16,1);
      draw_sprite(0,5,0,72, 16,1);
      draw_sprite(0,5,0,80, 16,1);
      draw_sprite(0,5,0,88, 16,1);
      draw_sprite(0,5,0,96, 16,1);
      draw_sprite(0,5,0,104,16,1);
      draw_sprite(0,5,0,112,16,1);
      draw_sprite(0,5,0,120,16,1);
      draw_sprite(0,5,0,128,16,1);
      draw_sprite(0,5,0,136,16,1);
      draw_sprite(0,5,0,144,16,1);
      draw_sprite(0,5,0,152,16,1);
      draw_sprite(0,5,0,160,16,1);
      draw_sprite(0,5,0,168,16,1);
      draw_sprite(0,5,0,176,16,1);
      draw_sprite(0,5,0,184,16,1);
      draw_sprite(0,6,1,0,  24,1);
      draw_sprite(0,5,0,8,  24,1);
      draw_sprite(0,5,0,16, 24,1);
      draw_sprite(0,5,0,24, 24,1);
      draw_sprite(0,5,0,32, 24,1);
      draw_sprite(0,5,0,40, 24,1);
      draw_sprite(0,5,0,48, 24,1);
      draw_sprite(0,5,0,56, 24,1);
      draw_sprite(0,5,0,64, 24,1);
      draw_sprite(0,5,0,72, 24,1);
      draw_sprite(0,5,0,80, 24,1);
      draw_sprite(0,5,0,88, 24,1);
      draw_sprite(0,5,0,96, 24,1);
      draw_sprite(0,5,0,104,24,1);
      draw_sprite(0,5,0,112,24,1);
      draw_sprite(0,5,0,120,24,1);
      draw_sprite(0,5,0,128,24,1);
      draw_sprite(0,5,0,136,24,1);
      draw_sprite(0,5,0,144,24,1);
      draw_sprite(0,5,0,152,24,1);
      draw_sprite(0,5,0,160,24,1);
      draw_sprite(0,5,0,168,24,1);
      draw_sprite(0,5,0,176,24,1);
      draw_sprite(0,5,0,184,24,1);
      draw_sprite(0,6,0,0,  32,1);
      draw_sprite(0,5,0,8,  32,1);
      draw_sprite(0,5,0,16, 32,1);
      draw_sprite(0,5,0,24, 32,1);
      draw_sprite(0,5,0,32, 32,1);
      draw_sprite(0,3,1,40, 32,1);
      draw_sprite(0,4,1,48, 32,1);
      draw_sprite(0,5,1,56, 32,1);
      draw_sprite(0,4,1,64, 32,1);
      draw_sprite(0,5,2,72, 32,1);
      draw_sprite(0,5,0,80, 32,1);
      draw_sprite(0,5,0,88, 32,1);
      draw_sprite(0,5,0,96, 32,1);
      draw_sprite(0,5,0,104,32,1);
      draw_sprite(0,5,0,112,32,1);
      draw_sprite(0,5,0,120,32,1);
      draw_sprite(0,5,0,128,32,1);
      draw_sprite(0,5,0,136,32,1);
      draw_sprite(0,5,0,144,32,1);
      draw_sprite(0,5,0,152,32,1);
      draw_sprite(0,5,0,160,32,1);
      draw_sprite(0,5,0,168,32,1);
      draw_sprite(0,5,0,176,32,1);
      draw_sprite(0,5,0,184,32,1);
      draw_sprite(0,6,1,-2,  40,1);
      draw_sprite(0,5,0,8,  40,1);
      draw_sprite(0,5,0,16, 40,1);
      draw_sprite(0,5,0,24, 40,1);
      draw_sprite(0,5,0,32, 40,1);
      draw_sprite(0,0,1,40, 40,1);
      draw_sprite(0,1,1,48, 40,1);
      draw_sprite(0,2,1,56, 40,1);
      draw_sprite(0,1,1,64, 40,1);
      draw_sprite(0,6,2,72, 40,1);
      draw_sprite(0,5,0,80, 40,1);
      draw_sprite(0,5,0,88, 40,1);
      draw_sprite(0,5,0,96, 40,1);
      draw_sprite(0,5,0,104,40,1);
      draw_sprite(0,5,0,112,40,1);
      draw_sprite(0,5,0,120,40,1);
      draw_sprite(0,5,0,128,40,1);
      draw_sprite(0,5,0,136,40,1);
      draw_sprite(0,5,0,144,40,1);
      draw_sprite(0,5,0,152,40,1);
      draw_sprite(0,5,0,160,40,1);
      draw_sprite(0,5,0,168,40,1);
      draw_sprite(0,5,0,176,40,1);
      draw_sprite(0,5,0,184,40,1);
    }));
    lua.set("dummy", hlua::function0(|| {dummy_sprite();}));

    // Input, for this, the integer type shouldn't matter
    // In fact, maybe (not sure), all integers should be 32 bit for the std functions.
    lua.set("btn_reg", hlua::function0(|| -> u8 {
      mem::peek(mem::LOC_HARD.start + mem::OFF_INPUT.start)
    }));

    lua.set("btn", hlua::function1(|button: u32| -> bool {
      let register = mem::peek(mem::LOC_HARD.start + mem::OFF_INPUT.start);
      match button {
        0 => (register & 0b00000001) > 0,
        1 => (register & 0b00000010) > 0,
        2 => (register & 0b00000100) > 0,
        3 => (register & 0b00001000) > 0,
        4 => (register & 0b00010000) > 0,
        5 => (register & 0b00100000) > 0,
        6 => (register & 0b01000000) > 0,
        7 => (register & 0b10000000) > 0,
        _ => false
      }
    }));
}

fn get_buffer_loc(x: isize, y: isize) -> usize{
  let x = cmp::min(192, x) as u32;
  let y = cmp::min(144, y) as u32;
  mem::LOC_SCRE.start + x as usize /2 + (display::SCR_X/2 * y) as usize
}

fn draw_line(x1:i32,y1:i32,x2:i32,y2:i32,color:u8) {
  for (x, y) in Bresenham::new((x1 as isize,y1 as isize),(x2 as isize,y2 as isize)) {
        if (x < 0 || x > display::SCR_X as isize) || (y < 0 || y > display::SCR_Y as isize) {
          continue;
        }
        set_point(x as i32,y as i32,color);
      }
}

fn draw_sprite(src_sheet: u32, src_x: u32, src_y: u32, x: i32, y: i32, size: u32) {
  let mut sprite_offset = mem::LOC_SPRI.start + (src_x as usize * 4) + (48 * src_y*8) as usize + (src_sheet * 0xD80) as usize;
  let start = cmp::max(cmp::min(y,0).abs(), 0);
  if (x & 1) == 1 {
    for i in start..8*size as i32 {
    for j in 0..4*size as i32 {
      let sprite_pixel = mem::peek(sprite_offset + j as usize + (48 * i) as usize);
      set_point(x + j * 2, y + i, sprite_pixel >> 4);
      set_point(x + j * 2 + 1, y + i, sprite_pixel & 15);
    }
  }
  } else {
    for i in start..8*size as i32 {
      if sprite_offset < mem::LOC_SCRE.start {
        println!("Line out of bounds");
        continue;
      }
      let length = (size*4) as i32 + cmp::min(x/2, 0);
      if length < (size*4) as i32 {
        mem::mcpy_w(get_buffer_loc(0 as isize,(y+i as i32) as isize), sprite_offset + (x.abs()/2) as usize, length as usize);
      } else {
        mem::mcpy_w(get_buffer_loc(x as isize,(y+i as i32) as isize), sprite_offset as usize, (size*4) as usize);
      }
      sprite_offset += 48;
    }
  }
}

fn draw_sprite_transparent(src_sheet: u32, src_x: u32, src_y: u32, x: i32, y: i32, size: u32, alpha: u8) {
  let mut sprite_offset = mem::LOC_SPRI.start + (src_x as usize * 4) + (48 * src_y*8) as usize + (src_sheet * 0xD80) as usize;
  let start = cmp::max(cmp::min(y,0).abs(), 0);

  for i in start..8*size as i32 {
    for j in 0..4*size as i32 {
      let sprite_pixel = mem::peek(sprite_offset + j as usize + (48 * i) as usize);
      if sprite_pixel >> 4 != alpha {
        set_point(x + j * 2, y + i, sprite_pixel >> 4);
      }
      if sprite_pixel & 15 != alpha {
        set_point(x + j * 2 + 1, y + i, sprite_pixel & 15);
      }
    }
  }
}

fn in_bounds(x:i32, y:i32) -> bool {
  x >= 0 && x < display::SCR_X as i32 && y >= 0 && y < display::SCR_Y as i32
}

fn draw_horiz_line(x1:i32,x2:i32,y:i32,color:u8) {
  let mut x_min = cmp::max(cmp::min(x1, x2), 0);
  let mut x_max = cmp::min(cmp::max(x1, x2), 193);
  if x_min < 0 || x_max > display::SCR_X as i32 || y < 0 || y > display::SCR_Y as i32{
    return;
  }
  let length = x_min - x_max;
  if (x_min & 1) == 1 {
    // Need to set right pixel in screen byte
    let mut pixel = mem::peek(get_buffer_loc(x_min as isize, y as isize));
    pixel = (pixel & 0xF0) | color;
    mem::poke_w(get_buffer_loc(x_min as isize, y as isize), pixel);
    x_min += 1;
  }
  if (x_max & 1) == 0 {
    // Need to set left pixel in screen byte
    let mut pixel = mem::peek(get_buffer_loc(x_max as isize, y as isize));
    pixel = (pixel & 0x0F) | (color << 4);
    mem::poke_w(get_buffer_loc(x_max as isize, y as isize), pixel);
  }
  let length = f32::ceil(x_max as f32/2.0 - x_min as f32/2.0) as usize;
  mem::mset_w(get_buffer_loc(x_min as isize, y as isize), length, color | (color << 4));
}

fn set_point(x:i32,y:i32,color:u8) {
  if in_bounds(x,y) {
    let mut pixel_current = mem::peek(get_buffer_loc(x as isize,y as isize));
    if (x & 1) == 0 {
      pixel_current = (pixel_current & 0x0F) | (color << 4);
    } else {
      pixel_current = (pixel_current & 0xF0) | color;
    }
    mem::poke_w(get_buffer_loc(x as isize,y as isize), pixel_current);
  }
}

fn dummy_sprite() {
  println!("Initializing dummy sprite");
  mem::map_vector(mem::LOC_SPRI.start, 3456, &SPRITESHEET);
}

#[test]
fn test_peek_poke() {
    use lua;
    let mut l = lua::create_lua();
    l.execute::<()>("
        _poke(1, -10)
        _poke(2, 001)
        _poke(8, 120)
        _poke(10, 0x20)
        _poke(189, -3020)

        for i=0, 200 do
           local val = _peek(i)
           if val ~= 0 then
              print(\"val \"..i..\" is \"..val)
           end
        end").unwrap();
}

  const SPRITESHEET: [u8; 3456] = [0x01, 0x23, 0x00, 0x00, 0x1a, 0xaa, 0xaa, 0xa0, 0xaa, 0xaa, 0x00, 0x00, 0x0a, 0xaa, 0xaa, 0xa1, 
  0x11, 0x11, 0x11, 0x11, 0x33, 0x33, 0x33, 0x33, 0x3e, 0xee, 0xee, 0xe3, 0x44, 0x44, 0x44, 0x44, 
  0x33, 0x33, 0x33, 0x33, 0x44, 0x44, 0x44, 0x63, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
  0x45, 0x67, 0x00, 0x00, 0x1a, 0xaa, 0xaa, 0xa0, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xaa, 0xaa, 0xa1, 
  0xaa, 0xaa, 0xaa, 0xaa, 0x3e, 0x3e, 0x33, 0x33, 0x3e, 0xee, 0xee, 0xe3, 0x44, 0x44, 0x44, 0x44, 
  0x66, 0x66, 0x66, 0x66, 0x44, 0x44, 0x44, 0x63, 0x36, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x63, 
  0x89, 0xab, 0x00, 0x00, 0x1a, 0xaa, 0xaa, 0xa0, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xaa, 0xaa, 0xa1, 
  0xaa, 0xaa, 0xaa, 0xaa, 0x33, 0xe3, 0x33, 0x33, 0xee, 0x2e, 0xee, 0xee, 0x44, 0x4d, 0xd4, 0x44, 
  0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x63, 0x36, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x63, 
  0xcd, 0xef, 0x00, 0x00, 0x1a, 0xaa, 0xaa, 0xa0, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xaa, 0xaa, 0xa1, 
  0xaa, 0xaa, 0xaa, 0xaa, 0x33, 0x33, 0x33, 0x33, 0xee, 0xee, 0xee, 0xee, 0x4d, 0xd4, 0x44, 0x44, 
  0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x63, 0x36, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x63, 
  0x00, 0x00, 0x00, 0x00, 0x1a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa1, 
  0xaa, 0xaa, 0xaa, 0xaa, 0x33, 0x33, 0x33, 0x33, 0xee, 0xee, 0xe2, 0xee, 0x44, 0x44, 0x44, 0x44, 
  0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x63, 0x36, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x63, 
  0x00, 0x00, 0x00, 0x00, 0x1a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa1, 
  0xaa, 0xaa, 0xaa, 0xaa, 0x33, 0x33, 0xe3, 0xe3, 0xee, 0xee, 0xee, 0xee, 0x44, 0x44, 0x4d, 0xd4, 
  0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x63, 0x36, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x63, 
  0x00, 0x00, 0x00, 0x00, 0x1a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa1, 
  0xaa, 0xaa, 0xaa, 0xaa, 0x33, 0x33, 0x3e, 0x33, 0x3e, 0xee, 0xee, 0xe3, 0x44, 0x4d, 0xd4, 0x44, 
  0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x63, 0x36, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x63, 
  0x00, 0x00, 0x00, 0x00, 0x1a, 0xaa, 0xaa, 0xaa, 0x11, 0x11, 0x11, 0x11, 0xaa, 0xaa, 0xaa, 0xa1, 
  0xaa, 0xaa, 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x33, 0x66, 0x66, 0x33, 0x44, 0x44, 0x44, 0x44, 
  0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x63, 0x36, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x63, 
  0x33, 0xab, 0xbb, 0xbb, 0x6c, 0xcc, 0xcc, 0xc6, 0xb6, 0x66, 0x66, 0x6b, 0x33, 0x33, 0x33, 0x33, 
  0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x66, 0x66, 0x33, 0x44, 0x44, 0x44, 0x44, 
  0x44, 0x44, 0x44, 0x44, 0x36, 0x44, 0x44, 0x44, 0x36, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x63, 
  0x33, 0xab, 0xbb, 0xbb, 0x66, 0x66, 0x66, 0x66, 0xb6, 0x66, 0x66, 0x6b, 0x33, 0x36, 0x66, 0x66, 
  0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x33, 0x66, 0x66, 0x33, 0x44, 0x4d, 0xd4, 0x44, 
  0x44, 0x44, 0x44, 0x44, 0x36, 0x44, 0x44, 0x44, 0x36, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x63, 
  0x33, 0xab, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xb6, 0x66, 0x69, 0x6b, 0x33, 0x66, 0x66, 0x66, 
  0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x33, 0x66, 0x66, 0x33, 0x4d, 0xd4, 0x44, 0x44, 
  0x44, 0x44, 0x44, 0x44, 0x36, 0x44, 0x44, 0x44, 0x36, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x63, 
  0x33, 0xab, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xb6, 0x66, 0x66, 0x6b, 0x36, 0x66, 0x66, 0x66, 
  0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x33, 0x66, 0x66, 0x33, 0x44, 0x44, 0x44, 0x44, 
  0x44, 0x44, 0x44, 0x44, 0x36, 0x44, 0x44, 0x44, 0x36, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x63, 
  0x33, 0xab, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xb6, 0x66, 0x66, 0x6b, 0x33, 0xab, 0xbb, 0xbb, 
  0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0x33, 0x66, 0x66, 0x33, 0x44, 0x44, 0x4d, 0xd4, 
  0x44, 0x44, 0x44, 0x44, 0x36, 0x44, 0x44, 0x44, 0x36, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x63, 
  0x33, 0xab, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xb6, 0x66, 0x66, 0x6b, 0x33, 0xab, 0xbb, 0xbb, 
  0x66, 0x66, 0x66, 0x66, 0xb6, 0x66, 0x66, 0x6b, 0x33, 0x66, 0x66, 0x33, 0x44, 0x4d, 0xd4, 0x44, 
  0x44, 0x44, 0x44, 0x44, 0x36, 0x44, 0x44, 0x44, 0x36, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x63, 
  0x33, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x33, 0xab, 0xbb, 0xbb, 
  0x6c, 0xcc, 0xcc, 0xc6, 0xb6, 0xcc, 0xcc, 0x6b, 0x36, 0x66, 0x66, 0x63, 0x44, 0x44, 0x44, 0x44, 
  0x66, 0x66, 0x66, 0x66, 0x36, 0x44, 0x44, 0x44, 0x36, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x63, 
  0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xab, 0xbb, 0xbb, 
  0x6c, 0xcc, 0xcc, 0xc6, 0xb6, 0xcc, 0xcc, 0x6b, 0x33, 0x33, 0x33, 0x33, 0x44, 0x44, 0x44, 0x44, 
  0x33, 0x33, 0x33, 0x33, 0x36, 0x44, 0x44, 0x44, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
  0x36, 0x66, 0x66, 0x63, 0x33, 0x33, 0x33, 0x33, 0x36, 0x66, 0x66, 0x63, 0x33, 0x33, 0x33, 0x33, 
  0xf4, 0x44, 0x44, 0x4f, 0x33, 0x33, 0x33, 0x33, 0xbb, 0xbb, 0xba, 0x33, 0xdd, 0xdd, 0xdd, 0xdd, 
  0xdd, 0xdd, 0xdd, 0xdd, 0x33, 0x33, 0x33, 0x33, 0x44, 0x44, 0x44, 0x44, 0x4d, 0xdd, 0xdd, 0xdd, 
  0x36, 0xa6, 0x66, 0x63, 0x66, 0x66, 0x66, 0x66, 0x36, 0xa6, 0x66, 0x66, 0x66, 0x66, 0x66, 0x63, 
  0xf4, 0x77, 0x77, 0x4f, 0x66, 0x66, 0x63, 0x33, 0xbb, 0xbb, 0xba, 0x33, 0xdd, 0xd4, 0x4d, 0xdd, 
  0xdd, 0xdd, 0xdd, 0xdd, 0x36, 0x66, 0x66, 0x63, 0xdd, 0xdd, 0xdd, 0xdd, 0x4d, 0xdd, 0xdd, 0xdd, 
  0x36, 0x66, 0x66, 0x63, 0x66, 0xa6, 0x66, 0xa6, 0x36, 0x66, 0x6a, 0x66, 0xa6, 0x66, 0x66, 0x63, 
  0xf7, 0x17, 0x71, 0x7f, 0x66, 0x66, 0x66, 0x33, 0xbb, 0xbb, 0xba, 0x33, 0xd4, 0x4d, 0xdd, 0xdd, 
  0xdd, 0xd4, 0x4d, 0xdd, 0x36, 0x44, 0x44, 0x63, 0xdd, 0xdd, 0xdd, 0xdd, 0x4d, 0xdd, 0xdd, 0xdd, 
  0x36, 0x66, 0xa6, 0x63, 0x66, 0x66, 0x66, 0x66, 0x36, 0x66, 0x66, 0x66, 0x66, 0x66, 0xa6, 0x63, 
  0xf7, 0x77, 0x77, 0x7f, 0x66, 0x66, 0x66, 0x63, 0xbb, 0xbb, 0xba, 0x33, 0xdd, 0xdd, 0xdd, 0xdd, 
  0xd4, 0x4d, 0xdd, 0xdd, 0x36, 0x44, 0x44, 0x63, 0xdd, 0xdd, 0xdd, 0xdd, 0x4d, 0xdd, 0xdd, 0xdd, 
  0x36, 0x66, 0x66, 0x63, 0x66, 0x66, 0xa6, 0x66, 0x36, 0x6a, 0x66, 0x66, 0x66, 0x66, 0x66, 0x63, 
  0xf7, 0x22, 0x22, 0xff, 0xbb, 0xbb, 0xba, 0x33, 0xbb, 0xbb, 0xba, 0x33, 0xdd, 0xdd, 0xd4, 0x4d, 
  0xdd, 0xdd, 0xdd, 0xdd, 0x36, 0x44, 0x44, 0x63, 0xdd, 0xdd, 0xdd, 0xdd, 0x4d, 0xdd, 0xdd, 0xdd, 
  0x36, 0xa6, 0x66, 0x63, 0x6a, 0x66, 0x66, 0x66, 0x36, 0x66, 0x66, 0x6a, 0x66, 0xa6, 0x66, 0x63, 
  0xff, 0x22, 0x22, 0x7f, 0xbb, 0xbb, 0xba, 0x33, 0xbb, 0xbb, 0xba, 0x33, 0xdd, 0xd4, 0x4d, 0xdd, 
  0xdd, 0xdd, 0xd4, 0x4d, 0x36, 0x44, 0x44, 0x63, 0xdd, 0xdd, 0xdd, 0xdd, 0x4d, 0xdd, 0xdd, 0xdd, 
  0x36, 0x66, 0x6a, 0x63, 0x66, 0x66, 0x66, 0x66, 0x36, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6a, 0x63, 
  0xff, 0x22, 0x22, 0xff, 0xbb, 0xbb, 0xba, 0x33, 0xaa, 0xaa, 0xaa, 0x33, 0xdd, 0xdd, 0xdd, 0xdd, 
  0xdd, 0xd4, 0x4d, 0xdd, 0x36, 0x66, 0x66, 0x63, 0xdd, 0xdd, 0xdd, 0xdd, 0x4d, 0xdd, 0xdd, 0xdd, 
  0x36, 0x66, 0x66, 0x63, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x36, 0x66, 0x66, 0x63, 
  0xff, 0xaf, 0xaf, 0xff, 0xbb, 0xbb, 0xba, 0x33, 0x33, 0x33, 0x33, 0x33, 0xdd, 0xdd, 0xdd, 0xdd, 
  0xdd, 0xdd, 0xdd, 0xdd, 0x33, 0x33, 0x33, 0x33, 0xdd, 0xdd, 0xdd, 0xdd, 0x4d, 0xdd, 0xdd, 0xdd, 
  0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x36, 0x66, 0x66, 0x63, 
  0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xd4, 
  0x33, 0x53, 0x33, 0x33, 0x35, 0x35, 0x33, 0x33, 0x36, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6a, 0x63, 
  0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x4d, 0xdd, 0xdd, 0xd4, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xd4, 
  0x35, 0x95, 0x33, 0x33, 0x33, 0x93, 0x33, 0x33, 0x36, 0x66, 0x66, 0x6a, 0x66, 0xa6, 0x66, 0x63, 
  0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x4d, 0xdd, 0xdd, 0xd4, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xd4, 
  0x33, 0x53, 0x33, 0x33, 0x35, 0xe5, 0x33, 0x33, 0x36, 0x6a, 0x66, 0x66, 0x66, 0x66, 0x66, 0x63, 
  0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x4d, 0xdd, 0xdd, 0xd4, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xd4, 
  0x33, 0xe3, 0x83, 0x83, 0x33, 0xe3, 0x38, 0x33, 0x36, 0x66, 0x66, 0x66, 0x66, 0x66, 0xa6, 0x63, 
  0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x4d, 0xdd, 0xdd, 0xd4, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xd4, 
  0x33, 0x33, 0x39, 0x33, 0x33, 0x33, 0x89, 0x83, 0x36, 0x66, 0x6a, 0x66, 0xa6, 0x66, 0x66, 0x63, 
  0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x4d, 0xdd, 0xdd, 0xd4, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xd4, 
  0x33, 0x33, 0x8e, 0x83, 0x33, 0x33, 0x38, 0x33, 0x36, 0xa6, 0x66, 0x66, 0x66, 0x66, 0x66, 0x63, 
  0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x4d, 0xdd, 0xdd, 0xd4, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xd4, 
  0x33, 0x33, 0x3e, 0x33, 0x33, 0x33, 0x3e, 0x33, 0x36, 0x66, 0x66, 0x63, 0x33, 0x33, 0x33, 0x33, 
  0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0xdd, 0xdd, 0xdd, 0xd4, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
